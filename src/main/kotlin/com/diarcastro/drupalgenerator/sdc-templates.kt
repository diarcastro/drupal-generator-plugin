package com.diarcastro.drupalgenerator

fun templateComponent(componentData: ComponentData): ByteArray {
    val schema = componentData.schema
    val componentTitle = componentData.toTitle()
    val componentStatus = componentData.status

    return """# Generated by Drupal SDC Generator Plugin
# Diego Castro <ing.diegocastro@gmail.com>

$schema
name: $componentTitle
status: $componentStatus

props:
  type: object
  required:
    - text

  properties:
    text:
      title: Text
      type: string

#slots:
#  body:
#    title: Body
#    required: true
#    description: This is the body
""".toByteArray()
}

fun templateTwig(componentData: ComponentData): ByteArray {
    val componentTitle = componentData.toTitle()
    val component = componentData.fileName()

    return """{# $componentTitle Component #}

{% set classes = [
  "$component",
] %}

<article {{ attributes.addClass(classes) }}>
  <h2>{{ title }}</h2>
  {# {{ body }} #}
</article>
""".toByteArray()
}

fun templateScss(componentData: ComponentData): ByteArray {
    val componentTitle = componentData.toTitle()
    val component = componentData.fileName()

    return """/* $componentTitle Component */

.$component {
  // Write some CSS magic here
}
""".toByteArray()
}

fun templateJs(componentData: ComponentData): ByteArray {
    val componentTitle = componentData.toTitle()
    val component = componentData.fileName()
    val behaviorName = componentData.variableName()

    return """/**
* $componentTitle Component
**/

((Drupal, once) => {
  Drupal.behaviors.$behaviorName = {
    attach (context/*, settings*/) {
      // Write some JS magic here
      once('once-$component', '.$component', context)
        .forEach((componentItem) => {
        });
    },
    detach (/* context, settings */) {},
  };
})(Drupal, once);
""".toByteArray()
}

fun templateStories(componentData: ComponentData, resourceName: String): ByteArray {
    val componentTitle = componentData.toTitle()
    val component = componentData.fileName()
    val componentCamelCase = componentData.variableName()

    return """{#
# Storybook stories for $componentTitle
# More documentation on https://www.drupal.org/project/storybook
#}

{% stories $componentCamelCase with {
  title: "$componentTitle",
  args: {},
} %}

  {% story default with {
    name: "Default",
    args: {
        text: "Hello, World!",
    },
    params: {},
  } %}

    {{ include("$resourceName:$component", { text }) }}
    {# Example using embed
      {% embed("$resourceName:$component" with { text }) %}
       {# blocks/slots here #}
      {% endembed %}
    #}

  {% endstory %}
   
{% endstories %}
""".toByteArray()
}